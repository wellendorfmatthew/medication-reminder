/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
import * as stream from "stream";
export declare namespace Chapters {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Chapters {
    protected readonly _options: Chapters.Options;
    constructor(_options?: Chapters.Options);
    /**
     * Returns a list of a Studio project's chapters.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Chapters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.chapters.getAll("21m00Tcm4TlvDq8ikWAM")
     */
    getAll(projectId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.GetChaptersResponse>;
    /**
     * Creates a new chapter either as blank or from a URL.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {ElevenLabs.studio.BodyCreateChapterV1StudioProjectsProjectIdChaptersPost} request
     * @param {Chapters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.chapters.create("21m00Tcm4TlvDq8ikWAM", {
     *         name: "Chapter 1"
     *     })
     */
    create(projectId: string, request: ElevenLabs.studio.BodyCreateChapterV1StudioProjectsProjectIdChaptersPost, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.AddChapterResponseModel>;
    /**
     * Returns information about a specific chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {Chapters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.chapters.get("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    get(projectId: string, chapterId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.ChapterWithContentResponseModel>;
    /**
     * Updates a chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {ElevenLabs.studio.BodyUpdateChapterV1StudioProjectsProjectIdChaptersChapterIdPost} request
     * @param {Chapters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.chapters.edit("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    edit(projectId: string, chapterId: string, request?: ElevenLabs.studio.BodyUpdateChapterV1StudioProjectsProjectIdChaptersChapterIdPost, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.EditChapterResponseModel>;
    /**
     * Deletes a chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {Chapters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.chapters.delete("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    delete(projectId: string, chapterId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.DeleteChapterResponseModel>;
    /**
     * Starts conversion of a specific chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {Chapters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.chapters.convert("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    convert(projectId: string, chapterId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.ConvertChapterResponseModel>;
    /**
     * Gets information about all the snapshots of a chapter. Each snapshot can be downloaded as audio. Whenever a chapter is converted a snapshot will automatically be created.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {Chapters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.chapters.getAllSnapshots("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    getAllSnapshots(projectId: string, chapterId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.ChapterSnapshotsResponse>;
    /**
     * Returns the chapter snapshot.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {string} chapterSnapshotId - The ID of the chapter snapshot.
     * @param {Chapters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.chapters.getChapterSnapshot("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    getChapterSnapshot(projectId: string, chapterId: string, chapterSnapshotId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.ChapterSnapshotExtendedResponseModel>;
    /**
     * Stream the audio from a chapter snapshot. Use `GET /v1/studio/projects/{project_id}/chapters/{chapter_id}/snapshots` to return the snapshots of a chapter.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    streamSnapshot(projectId: string, chapterId: string, chapterSnapshotId: string, request?: ElevenLabs.studio.BodyStreamChapterAudioV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost, requestOptions?: Chapters.RequestOptions): Promise<stream.Readable>;
}
