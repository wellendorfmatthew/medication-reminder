/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import { History } from "./api/resources/history/client/Client";
import { TextToSoundEffects } from "./api/resources/textToSoundEffects/client/Client";
import { AudioIsolation } from "./api/resources/audioIsolation/client/Client";
import { Samples } from "./api/resources/samples/client/Client";
import { TextToSpeech } from "./api/resources/textToSpeech/client/Client";
import { SpeechToSpeech } from "./api/resources/speechToSpeech/client/Client";
import { VoiceGeneration } from "./api/resources/voiceGeneration/client/Client";
import { TextToVoice } from "./api/resources/textToVoice/client/Client";
import { User } from "./api/resources/user/client/Client";
import { Voices } from "./api/resources/voices/client/Client";
import { Studio } from "./api/resources/studio/client/Client";
import { Projects } from "./api/resources/projects/client/Client";
import { Dubbing } from "./api/resources/dubbing/client/Client";
import { Models } from "./api/resources/models/client/Client";
import { AudioNative } from "./api/resources/audioNative/client/Client";
import { Usage } from "./api/resources/usage/client/Client";
import { PronunciationDictionary } from "./api/resources/pronunciationDictionary/client/Client";
import { Workspace } from "./api/resources/workspace/client/Client";
import { SpeechToText } from "./api/resources/speechToText/client/Client";
import { ConversationalAi } from "./api/resources/conversationalAi/client/Client";
export declare namespace ElevenLabsClient {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class ElevenLabsClient {
    protected readonly _options: ElevenLabsClient.Options;
    protected _history: History | undefined;
    protected _textToSoundEffects: TextToSoundEffects | undefined;
    protected _audioIsolation: AudioIsolation | undefined;
    protected _samples: Samples | undefined;
    protected _textToSpeech: TextToSpeech | undefined;
    protected _speechToSpeech: SpeechToSpeech | undefined;
    protected _voiceGeneration: VoiceGeneration | undefined;
    protected _textToVoice: TextToVoice | undefined;
    protected _user: User | undefined;
    protected _voices: Voices | undefined;
    protected _studio: Studio | undefined;
    protected _projects: Projects | undefined;
    protected _dubbing: Dubbing | undefined;
    protected _models: Models | undefined;
    protected _audioNative: AudioNative | undefined;
    protected _usage: Usage | undefined;
    protected _pronunciationDictionary: PronunciationDictionary | undefined;
    protected _workspace: Workspace | undefined;
    protected _speechToText: SpeechToText | undefined;
    protected _conversationalAi: ConversationalAi | undefined;
    constructor(_options?: ElevenLabsClient.Options);
    get history(): History;
    get textToSoundEffects(): TextToSoundEffects;
    get audioIsolation(): AudioIsolation;
    get samples(): Samples;
    get textToSpeech(): TextToSpeech;
    get speechToSpeech(): SpeechToSpeech;
    get voiceGeneration(): VoiceGeneration;
    get textToVoice(): TextToVoice;
    get user(): User;
    get voices(): Voices;
    get studio(): Studio;
    get projects(): Projects;
    get dubbing(): Dubbing;
    get models(): Models;
    get audioNative(): AudioNative;
    get usage(): Usage;
    get pronunciationDictionary(): PronunciationDictionary;
    get workspace(): Workspace;
    get speechToText(): SpeechToText;
    get conversationalAi(): ConversationalAi;
}
