/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
import * as stream from "stream";
export declare namespace Projects {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Projects {
    protected readonly _options: Projects.Options;
    constructor(_options?: Projects.Options);
    /**
     * Returns a list of your Studio projects with metadata.
     *
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.getAll()
     */
    getAll(requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.GetProjectsResponse>;
    /**
     * Creates a new Studio project, it can be either initialized as blank, from a document or from a URL.
     *
     * @param {ElevenLabs.studio.BodyCreateStudioProjectV1StudioProjectsPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.add({
     *         name: "name",
     *         default_title_voice_id: "default_title_voice_id",
     *         default_paragraph_voice_id: "default_paragraph_voice_id",
     *         default_model_id: "default_model_id"
     *     })
     */
    add(request: ElevenLabs.studio.BodyCreateStudioProjectV1StudioProjectsPost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.AddProjectResponseModel>;
    /**
     * Returns information about a specific Studio project. This endpoint returns more detailed information about a project than `GET /v1/studio`.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.get("21m00Tcm4TlvDq8ikWAM")
     */
    get(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.ProjectExtendedResponseModel>;
    /**
     * Updates the specified Studio project by setting the values of the parameters passed.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {ElevenLabs.studio.BodyUpdateStudioProjectV1StudioProjectsProjectIdPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.updateMetadata("21m00Tcm4TlvDq8ikWAM", {
     *         name: "Project 1",
     *         default_title_voice_id: "21m00Tcm4TlvDq8ikWAM",
     *         default_paragraph_voice_id: "21m00Tcm4TlvDq8ikWAM"
     *     })
     */
    updateMetadata(projectId: string, request: ElevenLabs.studio.BodyUpdateStudioProjectV1StudioProjectsProjectIdPost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.EditProjectResponseModel>;
    /**
     * Deletes a Studio project.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.delete("21m00Tcm4TlvDq8ikWAM")
     */
    delete(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.DeleteProjectResponseModel>;
    /**
     * Updates Studio project content.
     *
     * @param {string} projectId
     * @param {ElevenLabs.studio.BodyUpdateStudioProjectContentV1StudioProjectsProjectIdContentPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.updateContent("21m00Tcm4TlvDq8ikWAM", {})
     */
    updateContent(projectId: string, request: ElevenLabs.studio.BodyUpdateStudioProjectContentV1StudioProjectsProjectIdContentPost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.EditProjectResponseModel>;
    /**
     * Starts conversion of a Studio project and all of its chapters.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.convert("21m00Tcm4TlvDq8ikWAM")
     */
    convert(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.ConvertProjectResponseModel>;
    /**
     * Retrieves a list of snapshots for a Studio project.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.getSnapshots("21m00Tcm4TlvDq8ikWAM")
     */
    getSnapshots(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.ProjectSnapshotsResponse>;
    /**
     * Returns the project snapshot.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} projectSnapshotId - The ID of the Studio project snapshot.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.getProjectSnapshot("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    getProjectSnapshot(projectId: string, projectSnapshotId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.ProjectSnapshotExtendedResponseModel>;
    /**
     * Stream the audio from a Studio project snapshot.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} projectSnapshotId - The ID of the Studio project snapshot.
     * @param {ElevenLabs.studio.BodyStreamStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.streamAudio("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    streamAudio(projectId: string, projectSnapshotId: string, request?: ElevenLabs.studio.BodyStreamStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost, requestOptions?: Projects.RequestOptions): Promise<void>;
    /**
     * Returns a compressed archive of the Studio project's audio.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    streamArchive(projectId: string, projectSnapshotId: string, requestOptions?: Projects.RequestOptions): Promise<stream.Readable>;
    /**
     * Create a set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {ElevenLabs.studio.BodyCreatePronunciationDictionariesV1StudioProjectsProjectIdPronunciationDictionariesPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.updatePronunciationDictionaries("21m00Tcm4TlvDq8ikWAM", {
     *         pronunciation_dictionary_locators: [{
     *                 pronunciation_dictionary_id: "pronunciation_dictionary_id",
     *                 version_id: "version_id"
     *             }]
     *     })
     */
    updatePronunciationDictionaries(projectId: string, request: ElevenLabs.studio.BodyCreatePronunciationDictionariesV1StudioProjectsProjectIdPronunciationDictionariesPost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.CreatePronunciationDictionaryResponseModel>;
}
