/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../../index";
import * as stream from "stream";
export declare namespace Projects {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Access, create and convert Projects programmatically, only specifically whitelisted accounts can access the Projects API. If you need access please contact our sales team.
 */
export declare class Projects {
    protected readonly _options: Projects.Options;
    constructor(_options?: Projects.Options);
    /**
     * Create and auto-convert a podcast project. Currently, the LLM cost is covered by us but you will still be charged for the audio generation. In the future, you will be charged for both the LLM and audio generation costs.
     *
     * @param {ElevenLabs.BodyCreatePodcastV1ProjectsPodcastCreatePost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.createPodcast({
     *         model_id: "21m00Tcm4TlvDq8ikWAM",
     *         mode: {
     *             type: "conversation",
     *             conversation: {
     *                 host_voice_id: "aw1NgEzBg83R7vgmiJt6",
     *                 guest_voice_id: "aw1NgEzBg83R7vgmiJt7"
     *             }
     *         },
     *         source: {
     *             text: "This is a test podcast."
     *         }
     *     })
     */
    createPodcast(request: ElevenLabs.BodyCreatePodcastV1ProjectsPodcastCreatePost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.PodcastProjectResponseModel>;
    /**
     * Returns a list of your projects together and its metadata.
     *
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.getProjects()
     */
    getProjects(requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.GetProjectsResponse>;
    /**
     * Creates a new project, it can be either initialized as blank, from a document or from a URL.
     *
     * @param {ElevenLabs.BodyAddProjectV1ProjectsAddPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.addProject({
     *         name: "name",
     *         default_title_voice_id: "default_title_voice_id",
     *         default_paragraph_voice_id: "default_paragraph_voice_id",
     *         default_model_id: "default_model_id"
     *     })
     */
    addProject(request: ElevenLabs.BodyAddProjectV1ProjectsAddPost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.AddProjectResponseModel>;
    /**
     * Returns information about a specific project. This endpoint returns more detailed information about a project than `GET /v1/projects`.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.getProjectById("21m00Tcm4TlvDq8ikWAM")
     */
    getProjectById(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.ProjectExtendedResponseModel>;
    /**
     * Edits basic project info.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {ElevenLabs.BodyEditBasicProjectInfoV1ProjectsProjectIdPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.editBasicProjectInfo("21m00Tcm4TlvDq8ikWAM", {
     *         name: "Project 1",
     *         default_title_voice_id: "21m00Tcm4TlvDq8ikWAM",
     *         default_paragraph_voice_id: "21m00Tcm4TlvDq8ikWAM"
     *     })
     */
    editBasicProjectInfo(projectId: string, request: ElevenLabs.BodyEditBasicProjectInfoV1ProjectsProjectIdPost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.EditProjectResponseModel>;
    /**
     * Deletes a project.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.deleteProject("21m00Tcm4TlvDq8ikWAM")
     */
    deleteProject(projectId: string, requestOptions?: Projects.RequestOptions): Promise<unknown>;
    /**
     * Edits project content.
     *
     * @param {string} projectId
     * @param {ElevenLabs.BodyEditProjectContentV1ProjectsProjectIdContentPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.editProjectContent("21m00Tcm4TlvDq8ikWAM", {})
     */
    editProjectContent(projectId: string, request: ElevenLabs.BodyEditProjectContentV1ProjectsProjectIdContentPost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.EditProjectResponseModel>;
    /**
     * Starts conversion of a project and all of its chapters.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.convertProject("21m00Tcm4TlvDq8ikWAM")
     */
    convertProject(projectId: string, requestOptions?: Projects.RequestOptions): Promise<unknown>;
    /**
     * Gets the snapshots of a project.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.getProjectSnapshots("21m00Tcm4TlvDq8ikWAM")
     */
    getProjectSnapshots(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.ProjectSnapshotsResponse>;
    /**
     * Stream the audio from a project snapshot.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    streamProjectAudio(projectId: string, projectSnapshotId: string, request?: ElevenLabs.BodyStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost, requestOptions?: Projects.RequestOptions): Promise<stream.Readable>;
    /**
     * Streams archive with project audio.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} projectSnapshotId - The ID of the Studio project snapshot.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.streamsArchiveWithProjectAudio("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    streamsArchiveWithProjectAudio(projectId: string, projectSnapshotId: string, requestOptions?: Projects.RequestOptions): Promise<void>;
    /**
     * Returns a list of your chapters for a project together and its metadata.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.getChapters("21m00Tcm4TlvDq8ikWAM")
     */
    getChapters(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.GetChaptersResponse>;
    /**
     * Returns information about a specific chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.getChapterById("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    getChapterById(projectId: string, chapterId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.ChapterWithContentResponseModel>;
    /**
     * Deletes a chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.deleteChapter("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    deleteChapter(projectId: string, chapterId: string, requestOptions?: Projects.RequestOptions): Promise<unknown>;
    /**
     * Edits a chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {ElevenLabs.BodyEditChapterV1ProjectsProjectIdChaptersChapterIdPatch} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.editChapter("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    editChapter(projectId: string, chapterId: string, request?: ElevenLabs.BodyEditChapterV1ProjectsProjectIdChaptersChapterIdPatch, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.EditChapterResponseModel>;
    /**
     * Creates a new chapter either as blank or from a URL.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {ElevenLabs.BodyAddChapterToAProjectV1ProjectsProjectIdChaptersAddPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.addChapterToAProject("21m00Tcm4TlvDq8ikWAM", {
     *         name: "Chapter 1"
     *     })
     */
    addChapterToAProject(projectId: string, request: ElevenLabs.BodyAddChapterToAProjectV1ProjectsProjectIdChaptersAddPost, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.AddChapterResponseModel>;
    /**
     * Starts conversion of a specific chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.convertChapter("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    convertChapter(projectId: string, chapterId: string, requestOptions?: Projects.RequestOptions): Promise<unknown>;
    /**
     * Gets information about all the snapshots of a chapter. Each snapshot can be downloaded as audio. Whenever a chapter is converted a snapshot will automatically be created.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.listChapterSnapshots("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    listChapterSnapshots(projectId: string, chapterId: string, requestOptions?: Projects.RequestOptions): Promise<ElevenLabs.ChapterSnapshotsResponse>;
    /**
     * Stream the audio from a chapter snapshot. Use `GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots` to return the chapter snapshots of a chapter.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {string} chapterId - The ID of the chapter.
     * @param {string} chapterSnapshotId - The ID of the chapter snapshot.
     * @param {ElevenLabs.BodyStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.streamChapterAudio("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    streamChapterAudio(projectId: string, chapterId: string, chapterSnapshotId: string, request?: ElevenLabs.BodyStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost, requestOptions?: Projects.RequestOptions): Promise<void>;
    /**
     * Updates the set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
     *
     * @param {string} projectId - The ID of the Studio project.
     * @param {ElevenLabs.UpdatePronunciationDictionariesRequest} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.projects.updatePronunciationDictionaries("21m00Tcm4TlvDq8ikWAM", {
     *         pronunciation_dictionary_locators: [{
     *                 pronunciation_dictionary_id: "pronunciation_dictionary_id",
     *                 version_id: "version_id"
     *             }]
     *     })
     */
    updatePronunciationDictionaries(projectId: string, request: ElevenLabs.UpdatePronunciationDictionariesRequest, requestOptions?: Projects.RequestOptions): Promise<unknown>;
}
