/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../../index";
export declare namespace ConversationalAi {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class ConversationalAi {
    protected readonly _options: ConversationalAi.Options;
    constructor(_options?: ConversationalAi.Options);
    /**
     * Get a signed url to start a conversation with an agent with an agent that requires authorization
     *
     * @param {ElevenLabs.ConversationalAiGetSignedUrlRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getSignedUrl({
     *         agent_id: "21m00Tcm4TlvDq8ikWAM"
     *     })
     */
    getSignedUrl(request: ElevenLabs.ConversationalAiGetSignedUrlRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.ConversationSignedUrlResponseModel>;
    /**
     * Create an agent from a config object
     *
     * @param {ElevenLabs.BodyCreateAgentV1ConvaiAgentsCreatePost} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.createAgent({
     *         conversation_config: {}
     *     })
     */
    createAgent(request: ElevenLabs.BodyCreateAgentV1ConvaiAgentsCreatePost, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.CreateAgentResponseModel>;
    /**
     * Retrieve config for an agent
     *
     * @param {string} agentId - The id of an agent. This is returned on agent creation.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getAgent("21m00Tcm4TlvDq8ikWAM")
     */
    getAgent(agentId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetAgentResponseModel>;
    /**
     * Delete an agent
     *
     * @param {string} agentId - The id of an agent. This is returned on agent creation.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.deleteAgent("21m00Tcm4TlvDq8ikWAM")
     */
    deleteAgent(agentId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<unknown>;
    /**
     * Patches an Agent settings
     *
     * @param {string} agentId - The id of an agent. This is returned on agent creation.
     * @param {ElevenLabs.BodyPatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatch} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.updateAgent("21m00Tcm4TlvDq8ikWAM")
     */
    updateAgent(agentId: string, request?: ElevenLabs.BodyPatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatch, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetAgentResponseModel>;
    /**
     * Retrieve the widget configuration for an agent
     *
     * @param {string} agentId - The id of an agent. This is returned on agent creation.
     * @param {ElevenLabs.ConversationalAiGetAgentWidgetRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getAgentWidget("21m00Tcm4TlvDq8ikWAM")
     */
    getAgentWidget(agentId: string, request?: ElevenLabs.ConversationalAiGetAgentWidgetRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetAgentEmbedResponseModel>;
    /**
     * Get the current link used to share the agent with others
     *
     * @param {string} agentId - The id of an agent. This is returned on agent creation.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getAgentLink("21m00Tcm4TlvDq8ikWAM")
     */
    getAgentLink(agentId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetAgentLinkResponseModel>;
    /**
     * Sets the avatar for an agent displayed in the widget
     *
     * @param {string} agentId
     * @param {ElevenLabs.BodyPostAgentAvatarV1ConvaiAgentsAgentIdAvatarPost} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.postAgentAvatar("21m00Tcm4TlvDq8ikWAM", {
     *         avatar_file: fs.createReadStream("/path/to/your/file")
     *     })
     */
    postAgentAvatar(agentId: string, request: ElevenLabs.BodyPostAgentAvatarV1ConvaiAgentsAgentIdAvatarPost, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.PostAgentAvatarResponseModel>;
    /**
     * Uploads a file or reference a webpage for the agent to use as part of it's knowledge base
     *
     * @param {string} agentId - The id of an agent. This is returned on agent creation.
     * @param {ElevenLabs.BodyAddASecretToTheAgentWhichCanBeReferencedInToolCallsV1ConvaiAgentsAgentIdAddSecretPost} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.addAgentSecret("21m00Tcm4TlvDq8ikWAM", {
     *         name: "MY API KEY",
     *         secret_value: "sk_api_12354abc"
     *     })
     */
    addAgentSecret(agentId: string, request: ElevenLabs.BodyAddASecretToTheAgentWhichCanBeReferencedInToolCallsV1ConvaiAgentsAgentIdAddSecretPost, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.AddAgentSecretResponseModel>;
    /**
     * Returns a page of your agents and their metadata.
     *
     * @param {ElevenLabs.ConversationalAiGetAgentsRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getAgents()
     */
    getAgents(request?: ElevenLabs.ConversationalAiGetAgentsRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetAgentsPageResponseModel>;
    /**
     * Get all conversations of agents that user owns. With option to restrict to a specific agent.
     *
     * @param {ElevenLabs.ConversationalAiGetConversationsRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getConversations({
     *         agent_id: "21m00Tcm4TlvDq8ikWAM"
     *     })
     */
    getConversations(request?: ElevenLabs.ConversationalAiGetConversationsRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetConversationsPageResponseModel>;
    /**
     * Get the details of a particular conversation
     *
     * @param {string} conversationId - The id of the conversation you're taking the action on.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getConversation("21m00Tcm4TlvDq8ikWAM")
     */
    getConversation(conversationId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetConversationResponseModel>;
    /**
     * Delete a particular conversation
     *
     * @param {string} conversationId - The id of the conversation you're taking the action on.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.deleteConversation("21m00Tcm4TlvDq8ikWAM")
     */
    deleteConversation(conversationId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<unknown>;
    /**
     * Get the audio recording of a particular conversation
     *
     * @param {string} conversationId - The id of the conversation you're taking the action on.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getConversationAudio("21m00Tcm4TlvDq8ikWAM")
     */
    getConversationAudio(conversationId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<void>;
    /**
     * Send the feedback for the given conversation
     *
     * @param {string} conversationId - The id of the conversation you're taking the action on.
     * @param {ElevenLabs.BodySendConversationFeedbackV1ConvaiConversationsConversationIdFeedbackPost} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.postConversationFeedback("21m00Tcm4TlvDq8ikWAM", {
     *         feedback: "like"
     *     })
     */
    postConversationFeedback(conversationId: string, request: ElevenLabs.BodySendConversationFeedbackV1ConvaiConversationsConversationIdFeedbackPost, requestOptions?: ConversationalAi.RequestOptions): Promise<unknown>;
    /**
     * Import Phone Number from Twilio configuration
     *
     * @param {ElevenLabs.CreatePhoneNumberRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.createPhoneNumber({
     *         phone_number: "phone_number",
     *         provider: "twilio",
     *         label: "label",
     *         sid: "sid",
     *         token: "token"
     *     })
     */
    createPhoneNumber(request: ElevenLabs.CreatePhoneNumberRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.CreatePhoneNumberResponseModel>;
    /**
     * Retrieve Phone Number details by ID
     *
     * @param {string} phoneNumberId - The id of an agent. This is returned on agent creation.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getPhoneNumber("TeaqRRdTcIfIu2i7BYfT")
     */
    getPhoneNumber(phoneNumberId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetPhoneNumberResponseModel>;
    /**
     * Delete Phone Number by ID
     *
     * @param {string} phoneNumberId - The id of an agent. This is returned on agent creation.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.deletePhoneNumber("TeaqRRdTcIfIu2i7BYfT")
     */
    deletePhoneNumber(phoneNumberId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<unknown>;
    /**
     * Update Phone Number details by ID
     *
     * @param {string} phoneNumberId - The id of an agent. This is returned on agent creation.
     * @param {ElevenLabs.UpdatePhoneNumberRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.updatePhoneNumber("TeaqRRdTcIfIu2i7BYfT")
     */
    updatePhoneNumber(phoneNumberId: string, request?: ElevenLabs.UpdatePhoneNumberRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetPhoneNumberResponseModel>;
    /**
     * Retrieve all Phone Numbers
     *
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getPhoneNumbers()
     */
    getPhoneNumbers(requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetPhoneNumberResponseModel[]>;
    /**
     * Get a list of available knowledge base documents
     *
     * @param {ElevenLabs.ConversationalAiGetKnowledgeBaseListRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getKnowledgeBaseList()
     */
    getKnowledgeBaseList(request?: ElevenLabs.ConversationalAiGetKnowledgeBaseListRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetKnowledgeBaseListResponseModel>;
    /**
     * Uploads a file or reference a webpage to use as part of the shared knowledge base
     *
     * @param {ElevenLabs.BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.addToKnowledgeBase({})
     */
    addToKnowledgeBase(request: ElevenLabs.BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.AddKnowledgeBaseResponseModel>;
    /**
     * In case the document is not RAG indexed, it triggers rag indexing task, otherwise it just returns the current status.
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {ElevenLabs.RagIndexRequestModel} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.ragIndexStatus("21m00Tcm4TlvDq8ikWAM", {
     *         model: "e5_mistral_7b_instruct"
     *     })
     */
    ragIndexStatus(documentationId: string, request: ElevenLabs.RagIndexRequestModel, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.RagIndexResponseModel>;
    /**
     * Get details about a specific documentation making up the agent's knowledge base
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getKnowledgeBaseDocumentById("21m00Tcm4TlvDq8ikWAM")
     */
    getKnowledgeBaseDocumentById(documentationId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetKnowledgeBaseResponseModel>;
    /**
     * Delete a document from the knowledge base
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.deleteKnowledgeBaseDocument("21m00Tcm4TlvDq8ikWAM")
     */
    deleteKnowledgeBaseDocument(documentationId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<unknown>;
    /**
     * Get a list of agents depending on this knowledge base document
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {ElevenLabs.ConversationalAiGetDependentAgentsRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getDependentAgents("21m00Tcm4TlvDq8ikWAM")
     */
    getDependentAgents(documentationId: string, request?: ElevenLabs.ConversationalAiGetDependentAgentsRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetKnowledgeBaseDependentAgentsResponseModel>;
    /**
     * Retrieve Convai settings for the workspace
     *
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getSettings()
     */
    getSettings(requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetConvAiSettingsResponseModel>;
    /**
     * Update Convai settings for the workspace
     *
     * @param {ElevenLabs.PatchConvAiSettingsRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.updateSettings()
     */
    updateSettings(request?: ElevenLabs.PatchConvAiSettingsRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetConvAiSettingsResponseModel>;
    /**
     * Get all workspace secrets for the user
     *
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getSecrets()
     */
    getSecrets(requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.GetWorkspaceSecretsResponseModel>;
    /**
     * Create a new secret for the workspace
     *
     * @param {ElevenLabs.PostWorkspaceSecretRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.createSecret({
     *         name: "name",
     *         value: "value"
     *     })
     */
    createSecret(request: ElevenLabs.PostWorkspaceSecretRequest, requestOptions?: ConversationalAi.RequestOptions): Promise<ElevenLabs.PostWorkspaceSecretResponseModel>;
    /**
     * Delete a workspace secret if it's not in use
     *
     * @param {string} secretId
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.deleteSecret("secret_id")
     */
    deleteSecret(secretId: string, requestOptions?: ConversationalAi.RequestOptions): Promise<void>;
}
